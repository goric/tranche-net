// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.4.0
// Machine:  VOSTRO
// DateTime: 1/29/2012 6:04:32 PM
// UserName: Tim
// Input file <..\GeneratorInputFiles\tranche.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using LexicalAnalysis;
using AbstractSyntaxTree;
using AbstractSyntaxTree.InternalTypes;
using tc;

namespace SyntaxAnalysis
{
internal enum Tokens {
    error=1,EOF=2,SETTINGS=3,DEAL=4,COLLATERAL=5,COLLATERALITEM=6,
    SECURITIES=7,BOND=8,CREDITPAYMENTRULES=9,SIMULATION=10,RULES=11,RPAREN=12,
    LBRACE=13,RBRACE=14,RBRACKET=15,PBRACKET=16,DOT=17,DOTDOT=18,
    COMMA=19,IN=20,TINT=21,TREAL=22,SEMI=23,TSTRING=24,
    TBOOL=25,TVOID=26,TCHAR=27,TFILE=28,TSET=29,TLIST=30,
    FOR=31,IF=32,ELSE=33,CLASS=34,AUTOPROP=35,NEW=36,
    RETURN=37,TRUE=38,FALSE=39,LITERAL_INT=40,LITERAL_REAL=41,LITERAL_STRING=42,
    LITERAL_CHAR=43,IDENTIFIER=44,ASSIGN=45,OR=46,AND=47,INCREMENT=48,
    DECREMENT=49,EXP=50,SMALLER=51,GREATER=52,SMEQ=53,GTEQ=54,
    EQ=55,NEQ=56,PLUS=57,MINUS=58,TIMES=59,DIVIDE=60,
    MOD=61,UMINUS=62,LPAREN=63,NOT=64,LBRACKET=65};

// Abstract base class for GPLEX scanners
internal abstract class ScanBase : AbstractScanner<SemanticValue,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

internal class Parser: ShiftReduceParser<SemanticValue, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[33];
  private static State[] states = new State[73];
  private static string[] nonTerms = new string[] {
      "program", "statementList", "statement", "expression", "literal", "onePlusActuals", 
      "actuals", "settingsOpt", "dealOpt", "collateralSection", "collListOpt", 
      "securitySection", "simulationSection", "rulesList", "secListOpt", "creditRulesOpt", 
      "$accept", };

  static Parser() {
    states[0] = new State(new int[]{3,69,4,-3,5,-3},new int[]{-1,1,-8,3});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{4,65,5,-5},new int[]{-9,4});
    states[4] = new State(new int[]{5,56},new int[]{-10,5});
    states[5] = new State(new int[]{7,47},new int[]{-12,6});
    states[6] = new State(new int[]{9,43,10,-17},new int[]{-16,7});
    states[7] = new State(new int[]{10,9},new int[]{-13,8});
    states[8] = new State(-2);
    states[9] = new State(new int[]{13,10});
    states[10] = new State(new int[]{11,13},new int[]{-14,11});
    states[11] = new State(new int[]{14,12});
    states[12] = new State(-19);
    states[13] = new State(new int[]{13,14});
    states[14] = new State(new int[]{23,19,44,20,13,34,32,37,40,31,41,32,42,33,14,-7},new int[]{-2,15,-3,17,-4,42,-5,30});
    states[15] = new State(new int[]{14,16});
    states[16] = new State(-24);
    states[17] = new State(new int[]{23,19,44,20,13,34,32,37,40,31,41,32,42,33,14,-7},new int[]{-2,18,-3,17,-4,42,-5,30});
    states[18] = new State(-8);
    states[19] = new State(-9);
    states[20] = new State(new int[]{23,21,45,22,63,25});
    states[21] = new State(-10);
    states[22] = new State(new int[]{44,24,40,31,41,32,42,33},new int[]{-4,23,-5,30});
    states[23] = new State(-11);
    states[24] = new State(new int[]{63,25});
    states[25] = new State(new int[]{44,24,40,31,41,32,42,33,12,-27},new int[]{-7,26,-6,28,-4,29,-5,30});
    states[26] = new State(new int[]{12,27});
    states[27] = new State(-25);
    states[28] = new State(-28);
    states[29] = new State(-29);
    states[30] = new State(-26);
    states[31] = new State(-30);
    states[32] = new State(-31);
    states[33] = new State(-32);
    states[34] = new State(new int[]{23,19,44,20,13,34,32,37,40,31,41,32,42,33,14,-7},new int[]{-2,35,-3,17,-4,42,-5,30});
    states[35] = new State(new int[]{14,36});
    states[36] = new State(-12);
    states[37] = new State(new int[]{63,38});
    states[38] = new State(new int[]{44,24,40,31,41,32,42,33},new int[]{-4,39,-5,30});
    states[39] = new State(new int[]{12,40});
    states[40] = new State(new int[]{23,19,44,20,13,34,32,37,40,31,41,32,42,33},new int[]{-3,41,-4,42,-5,30});
    states[41] = new State(-13);
    states[42] = new State(-14);
    states[43] = new State(new int[]{13,44});
    states[44] = new State(new int[]{23,19,44,20,13,34,32,37,40,31,41,32,42,33,14,-7},new int[]{-2,45,-3,17,-4,42,-5,30});
    states[45] = new State(new int[]{14,46});
    states[46] = new State(-18);
    states[47] = new State(new int[]{13,48});
    states[48] = new State(new int[]{8,51,14,-22},new int[]{-15,49});
    states[49] = new State(new int[]{14,50});
    states[50] = new State(-16);
    states[51] = new State(new int[]{13,52});
    states[52] = new State(new int[]{23,19,44,20,13,34,32,37,40,31,41,32,42,33,14,-7},new int[]{-2,53,-3,17,-4,42,-5,30});
    states[53] = new State(new int[]{14,54});
    states[54] = new State(new int[]{8,51,14,-22},new int[]{-15,55});
    states[55] = new State(-23);
    states[56] = new State(new int[]{13,57});
    states[57] = new State(new int[]{6,60,14,-20},new int[]{-11,58});
    states[58] = new State(new int[]{14,59});
    states[59] = new State(-15);
    states[60] = new State(new int[]{13,61});
    states[61] = new State(new int[]{23,19,44,20,13,34,32,37,40,31,41,32,42,33,14,-7},new int[]{-2,62,-3,17,-4,42,-5,30});
    states[62] = new State(new int[]{14,63});
    states[63] = new State(new int[]{6,60,14,-20},new int[]{-11,64});
    states[64] = new State(-21);
    states[65] = new State(new int[]{13,66});
    states[66] = new State(new int[]{23,19,44,20,13,34,32,37,40,31,41,32,42,33,14,-7},new int[]{-2,67,-3,17,-4,42,-5,30});
    states[67] = new State(new int[]{14,68});
    states[68] = new State(-6);
    states[69] = new State(new int[]{13,70});
    states[70] = new State(new int[]{23,19,44,20,13,34,32,37,40,31,41,32,42,33,14,-7},new int[]{-2,71,-3,17,-4,42,-5,30});
    states[71] = new State(new int[]{14,72});
    states[72] = new State(-4);

    rules[1] = new Rule(-17, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-8,-9,-10,-12,-16,-13});
    rules[3] = new Rule(-8, new int[]{});
    rules[4] = new Rule(-8, new int[]{3,13,-2,14});
    rules[5] = new Rule(-9, new int[]{});
    rules[6] = new Rule(-9, new int[]{4,13,-2,14});
    rules[7] = new Rule(-2, new int[]{});
    rules[8] = new Rule(-2, new int[]{-3,-2});
    rules[9] = new Rule(-3, new int[]{23});
    rules[10] = new Rule(-3, new int[]{44,23});
    rules[11] = new Rule(-3, new int[]{44,45,-4});
    rules[12] = new Rule(-3, new int[]{13,-2,14});
    rules[13] = new Rule(-3, new int[]{32,63,-4,12,-3});
    rules[14] = new Rule(-3, new int[]{-4});
    rules[15] = new Rule(-10, new int[]{5,13,-11,14});
    rules[16] = new Rule(-12, new int[]{7,13,-15,14});
    rules[17] = new Rule(-16, new int[]{});
    rules[18] = new Rule(-16, new int[]{9,13,-2,14});
    rules[19] = new Rule(-13, new int[]{10,13,-14,14});
    rules[20] = new Rule(-11, new int[]{});
    rules[21] = new Rule(-11, new int[]{6,13,-2,14,-11});
    rules[22] = new Rule(-15, new int[]{});
    rules[23] = new Rule(-15, new int[]{8,13,-2,14,-15});
    rules[24] = new Rule(-14, new int[]{11,13,-2,14});
    rules[25] = new Rule(-4, new int[]{44,63,-7,12});
    rules[26] = new Rule(-4, new int[]{-5});
    rules[27] = new Rule(-7, new int[]{});
    rules[28] = new Rule(-7, new int[]{-6});
    rules[29] = new Rule(-6, new int[]{-4});
    rules[30] = new Rule(-5, new int[]{40});
    rules[31] = new Rule(-5, new int[]{41});
    rules[32] = new Rule(-5, new int[]{42});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> settingsOpt, dealOpt, collateralSection, securitySection, 
              //            creditRulesOpt, simulationSection
{ CurrentSemanticValue.Prog = new Prog(ValueStack[ValueStack.Depth-6].Settings, ValueStack[ValueStack.Depth-5].Deal, ValueStack[ValueStack.Depth-4].Collateral, ValueStack[ValueStack.Depth-3].Securities, ValueStack[ValueStack.Depth-2].CreditPaymentRules, ValueStack[ValueStack.Depth-1].Simulation); SyntaxTreeRoot = CurrentSemanticValue.Prog; CurrentSemanticValue.Prog.Location = CurrentLocationSpan; }
        break;
      case 3: // settingsOpt -> /* empty */
{ CurrentSemanticValue.Settings = new Settings(); CurrentSemanticValue.Settings.Location = CurrentLocationSpan; }
        break;
      case 4: // settingsOpt -> SETTINGS, LBRACE, statementList, RBRACE
{ CurrentSemanticValue.Settings = new Settings(ValueStack[ValueStack.Depth-2].StatementList);  }
        break;
      case 5: // dealOpt -> /* empty */
{ CurrentSemanticValue.Deal = new Deal(); CurrentSemanticValue.Deal.Location = CurrentLocationSpan; }
        break;
      case 6: // dealOpt -> DEAL, LBRACE, statementList, RBRACE
{ CurrentSemanticValue.Deal = new Deal(ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.Deal.Location = CurrentLocationSpan; }
        break;
      case 7: // statementList -> /* empty */
{ CurrentSemanticValue.StatementList = new StatementList(); CurrentSemanticValue.StatementList.Location = CurrentLocationSpan; }
        break;
      case 8: // statementList -> statement, statementList
{ CurrentSemanticValue.StatementList = new StatementList(ValueStack[ValueStack.Depth-2].Statement, ValueStack[ValueStack.Depth-1].StatementList); CurrentSemanticValue.StatementList.Location = CurrentLocationSpan; }
        break;
      case 10: // statement -> IDENTIFIER, SEMI
{ CurrentSemanticValue.Statement = new StatementVariable(CurrentLocationSpan, ValueStack[ValueStack.Depth-2].Token.Value); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 11: // statement -> IDENTIFIER, ASSIGN, expression
{ CurrentSemanticValue.Statement = new StatementVariable(CurrentLocationSpan, ValueStack[ValueStack.Depth-3].Token.Value, ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 12: // statement -> LBRACE, statementList, RBRACE
{ CurrentSemanticValue.Statement = new Block(ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 13: // statement -> IF, LPAREN, expression, RPAREN, statement
{ CurrentSemanticValue.Statement = new IfThen(ValueStack[ValueStack.Depth-3].Expression, ValueStack[ValueStack.Depth-1].Statement); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 14: // statement -> expression
{ CurrentSemanticValue.Statement = new StatementExpression(ValueStack[ValueStack.Depth-1].Expression); CurrentSemanticValue.Statement.Location = CurrentLocationSpan; }
        break;
      case 15: // collateralSection -> COLLATERAL, LBRACE, collListOpt, RBRACE
{ CurrentSemanticValue.Collateral = new Collateral(ValueStack[ValueStack.Depth-2].CollateralItem); CurrentSemanticValue.Collateral.Location = CurrentLocationSpan; }
        break;
      case 16: // securitySection -> SECURITIES, LBRACE, secListOpt, RBRACE
{ CurrentSemanticValue.Securities = new Securities(ValueStack[ValueStack.Depth-2].Bond); CurrentSemanticValue.Securities.Location = CurrentLocationSpan; }
        break;
      case 17: // creditRulesOpt -> /* empty */
{ CurrentSemanticValue.CreditPaymentRules = new CreditPaymentRules(); CurrentSemanticValue.CreditPaymentRules.Location = CurrentLocationSpan; }
        break;
      case 18: // creditRulesOpt -> CREDITPAYMENTRULES, LBRACE, statementList, RBRACE
{ CurrentSemanticValue.CreditPaymentRules = new CreditPaymentRules(ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.CreditPaymentRules.Location = CurrentLocationSpan; }
        break;
      case 19: // simulationSection -> SIMULATION, LBRACE, rulesList, RBRACE
{ CurrentSemanticValue.Simulation = new Simulation(ValueStack[ValueStack.Depth-2].Rules); CurrentSemanticValue.Simulation.Location = CurrentLocationSpan; }
        break;
      case 20: // collListOpt -> /* empty */
{ CurrentSemanticValue.CollateralItem = new CollateralItem(); CurrentSemanticValue.CollateralItem.Location = CurrentLocationSpan; }
        break;
      case 21: // collListOpt -> COLLATERALITEM, LBRACE, statementList, RBRACE, collListOpt
{ CurrentSemanticValue.CollateralItem = new CollateralItem(ValueStack[ValueStack.Depth-3].StatementList, ValueStack[ValueStack.Depth-1].CollateralItem); CurrentSemanticValue.CollateralItem.Location = CurrentLocationSpan; }
        break;
      case 22: // secListOpt -> /* empty */
{ CurrentSemanticValue.Bond = new Bond(); CurrentSemanticValue.Bond.Location = CurrentLocationSpan; }
        break;
      case 23: // secListOpt -> BOND, LBRACE, statementList, RBRACE, secListOpt
{ CurrentSemanticValue.Bond = new Bond(ValueStack[ValueStack.Depth-3].StatementList, ValueStack[ValueStack.Depth-1].Bond); CurrentSemanticValue.Bond.Location = CurrentLocationSpan; }
        break;
      case 24: // rulesList -> RULES, LBRACE, statementList, RBRACE
{ CurrentSemanticValue.Rules = new Rules(ValueStack[ValueStack.Depth-2].StatementList); CurrentSemanticValue.Rules.Location = CurrentLocationSpan; }
        break;
      case 25: // expression -> IDENTIFIER, LPAREN, actuals, RPAREN
{ CurrentSemanticValue.Expression = new Invoke(ValueStack[ValueStack.Depth-4].Token.Value, ValueStack[ValueStack.Depth-2].ExpressionList); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 26: // expression -> literal
{ CurrentSemanticValue.Expression = ValueStack[ValueStack.Depth-1].Expression; CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 27: // actuals -> /* empty */
{ CurrentSemanticValue.ExpressionList = new ExpressionList(); CurrentSemanticValue.ExpressionList.Location = CurrentLocationSpan; }
        break;
      case 28: // actuals -> onePlusActuals
{ CurrentSemanticValue.ExpressionList = ValueStack[ValueStack.Depth-1].ExpressionList; CurrentSemanticValue.ExpressionList.Location = CurrentLocationSpan; }
        break;
      case 29: // onePlusActuals -> expression
{ CurrentSemanticValue.ExpressionList = new ExpressionList(ValueStack[ValueStack.Depth-1].Expression, new ExpressionList()); CurrentSemanticValue.ExpressionList.Location = CurrentLocationSpan; }
        break;
      case 30: // literal -> LITERAL_INT
{ CurrentSemanticValue.Expression = new IntegerLiteral(Int32.Parse(ValueStack[ValueStack.Depth-1].Token.Value.ToString().Replace(",",""))); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 31: // literal -> LITERAL_REAL
{ CurrentSemanticValue.Expression = new RealLiteral(Double.Parse(ValueStack[ValueStack.Depth-1].Token.Value.ToString().Replace(",",""))); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
      case 32: // literal -> LITERAL_STRING
{ CurrentSemanticValue.Expression = new StringLiteral(ValueStack[ValueStack.Depth-1].Token.Value); CurrentSemanticValue.Expression.Location = CurrentLocationSpan; }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }


public Prog SyntaxTreeRoot { get; set; }

public Parser(Scanner scan) : base(scan)
{
}
}
}
